var exec = require('child_process').exec;
var fs = require('fs');
var BASE_URL = '~/workspace/nightwatch/lib/';
var OutputFile = '/Users/andrei/www/nightwatchjs.org/js/app/api/output.json';
var methods = {};
var FileList = [
  ['selenium/protocol.js', 'protocol'],
  ['selenium/element-commands.js', 'commands'],
  ['selenium/client-commands.js', 'commands'],
  ['selenium/commands/pause.js', 'commands'],
  ['selenium/commands/waitForElementVisible.js', 'commands'],
  ['selenium/commands/waitForElementNotVisible.js', 'commands'],
  ['selenium/commands/waitForElementPresent.js', 'commands'],
  ['selenium/commands/waitForElementNotPresent.js', 'commands'],
  ['selenium/assertions/', 'assertions']
];

function writeToFile() {
  fs.writeFile(OutputFile, JSON.stringify(methods, null, 2), function() {
    console.log('FINISHED', OutputFile);
  });
}

function createDocFile() {
  var entry = FileList.shift();
  var file = entry[0];
  var section = entry[1];
  var ext = file.split('.').pop();
  if (ext == 'js') {
    methods[section] = methods[section] || [];
    console.log('Parsing',  BASE_URL + file);
    exec('dox < ' + BASE_URL + file, function(error, stdout, stderr) {
      console.log('dox finished', file);
      var parsed = JSON.parse(stdout);
      parseDocFile(parsed, section);
      console.log('FileList', FileList.length)
      if (FileList.length) {
        createDocFile();
      } else {
        writeToFile();
      }
    });
  } else {
    // FIXME:
    writeToFile();
  }

}

function parseDocFile(jsondata, section) {
  jsondata.forEach(function(item) {
    if (item.ignore) {
      return;
    }
    if (!item.ctx) {

    }

    var name = item.ctx && item.ctx.name || '';
    var api, params = [], link = '', descr = '', example = '', see = null, since = null, returns = null;

    item.tags.forEach(function(tag) {
      if (tag.type == 'method') {
        name = tag.string;
      } else if (tag.type == 'link') {
        link = tag.string;
      } else if (tag.type == 'param') {
        var paramName = tag.name;
        var optional = false;
        if (/\[(.+?)\]/.test(paramName)) {
          optional = true;
          var matches = paramName.match(/\[(.+)\]/);
          paramName = matches[1];
        }
        params.push({
          name : paramName,
          types : tag.types.join('|'),
          descr : tag.description,
          optional : optional
        });
      } else if (tag.type == 'api') {
        api = tag.visibility;
      } else if (tag.type == 'see') {
        see = tag.visibility;
      } else if (tag.type == 'returns') {
        var content = tag.string;
        var parts = content.split(/{(.+)}/);
        returns = {};
        if (parts.length > 1) {
          returns.type = parts[1];
          returns.descr = parts[2] || '';
        }
      } else if (tag.type == 'since') {
        since = tag.string;
      }
    });
    if (item.description) {
      descr = item.description.full;
      var parts = descr.split('\n\n');
      if (parts[parts.length-1].indexOf('<div class="highlight"><pre lang="">') === 0) {
        example = parts.pop()
          .replace('<div class="highlight"><pre lang="">', '')
          .replace('</pre></div>', '');
        descr = parts.join('\n\n');
      }
    }

    if (name) {
      methods[section].push({
        name : name,
        params : params,
        link : link,
        api : api,
        descr : descr,
        example : example,
        returns : returns,
        since : since,
        see : see
      });
    }

  });

  methods[section] = methods[section].sort(function(a, b) {
    if (a.name > b.name) {
      return 1;
    }
    if (a.name < b.name) {
      return -1;
    }
    return 0;
  });
}

createDocFile('protocol');
